
Необходимо создать сайт, который представляет из себя каталог фильмов. 

На сайте должны быть страницы: 
	страница списка всех фильмов (с пагинацией), 
	страница одного отдельного фильма, 
	страница редактирования данных о фильме, 
	страница создания нового фильма. 
	
	Редактировать фильм имеет право только тот, кто изначально выложил информацию об этом фильме. 
	
	Для каждого фильма хранятся: 
		название, 
		описание, 
		год выпуска, 
		режиссёр, 
		пользователь, который выложил информацию, 
		постер. 
		
	Постер - это файл-изображение. 
	Должна быть возможность загрузить этот файл на сервер и посмотреть его на странице детальной информации о фильме. 
	Функциональность по выкладыванию видео-файла фильма не нужна, нужна только информация о нём. 
	При реализации учитывать, что фильмов в каталоге может быть потенциально сотни тысяч.
Технические требования
Ко внешнему виду требования минимальные, но всё должно выглядеть аккуратно и приятно. 
Необходимо использовать Bootstrap. 
На бекенде должны быть:
	Asp.Net Core, 
	Asp.Net Identity и 
	Entity Framework Core. 
	
Не нужно использовать классический .Net Framework, только .Net Core. В остальном допустимо использовать любые сторонние библиотеки, в том числе nuget-пакеты. 
Не нужно самим реализовывать функциональность библиотек, если это не оправдано какими-то ограничениями.
Рекомендации
Не стоит на тестовом задании демонстрировать пример поговорки “из пушки по воробьям”. 
Сложность вашего решения должна быть сопоставима с решаемой задачей. 
Если вы хотите продемонстрировать знание и умение применить какой-то паттерн/концепт/подход - это очень хорошо. 
Только убедитесь, что это будет уместно. Задачу необходимо решать так, как вы бы решали её для коммерческих целей.

В качестве результата работы необходимо прислать ссылку на git-репозиторий с проектом на адрес y.lytkina@education-erp.com.
Исходные файлы в архиве присылать не нужно. Желательно использовать LocalDB, чтобы можно было без проблем запустить проект с начальными данными. 
Также в письме с решением необходимо прислать несколько скриншотов интерфейса. 
Любые вопросы по заданию тоже можете присылать на y.lytkina@education-erp.com. 

Совет: перед отправкой решения попробуйте клонировать репозиторий в другую папку и запустить проект. 
Проект должен запускаться. 
Частая ошибка - забыли включить в репозиторий файлы БД.

26.05.2020
X1. Не реализована проверка прав на редактирование фильма на бекенде (ни в get, ни в post методе). 
Таким образом становится возможным отредактировать фильм любого пользователя.

X2. Не реализована проверка на бекенде, что только зарегистрированный пользователь может добавить фильм. 
Для этого можно использовать стандартный атрибут [Authorize].

X3. В post методах нет защиты от XSRF-атак. - добавлен атрибут [AutoValidateAntiforgeryToken]

X4. При создании фильма нет проверки расширения загружаемого постера ни на фронте, ни на беке. 
Это дает возможность загрузить на сервер потенциально опасные файлы. - Реализован фильтр на стороне клиента

5. Реализован кастомный пагинатор, хотя для этого есть хорошие nuget-пакеты. Например, X.PagedList.

6. Постер хранится в базе. Это увеличивает размер базы в целом и конкретной таблицы в частности, что приводит к избыточному расходованию ресурсов. 
Также это усложняет использование кеширования из браузера. Рекомендуется файлы хранить в файловой системе.
- Моя попытка показать владения методами объединения таблиц, может быть несколько неуклюжая

X7. Асинхронность метода UploadedFile не используется в полной мере, так как сразу идет обращение к .Result, 
что есть блокирование потока в ожидании. Чтобы освободить поток на время ожидания завершения операции, рекомендуется использовать await. 
X8. Методы создания и редактирования фильма разделены. Это приводит к дублированию кода и усложнению поддержки.
X9. В post-методе редактирования фильма, если модель невалидна, в строке return View() не указано название View, 
и поэтому идет поиск View 'Edit', которого не существует, т.к. используется View 'Add'. Пользователь получает exception.
